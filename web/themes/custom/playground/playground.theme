<?php

use Drupal\views\Views;
use Drupal\block\Entity\Block;

function playground_preprocess_views_view__pages__page_2(&$variables) {
  $view = Views::getView('pages');
  $view->setDisplay('rest_export_1');
  $view->preExecute();
  $view->execute();

  $filters = [];

  if ($view->filter) {
    foreach ($view->filter as $filter) {

      if($filter->isExposed()) {
        $options = [];
  
        $filter_options = $filter->getValueOptions();
  
        if($filter->getPluginId() === 'taxonomy_index_tid') {
          $filter_options = [];
          $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($filter->options['vid']);
          foreach ($terms as $term) {
            $filter_options[$term->tid] = $term->name;
          }
        }
  
        if(!$filter_options) {continue;}
  
        foreach($filter_options as $id => $label) {
          $options[] = [
            'id' => $id,
            'label' => $label
          ];
        };
  
        $test = null;
  
        if (isset($filter->definition['entity field'])) {
          $test = $filter->definition['entity field'];
        }
  
        if (isset($filter->definition['field_name'])) {
          $test = $filter->definition['field_name'];
        }
  
        $filters[] = [
          'id' => $filter->options['id'],
          'options' => $options,
          'label' => $filter->pluginTitle(),
          'operator' => $filter->operator,
          'multiple' => $filter->options['expose']['multiple'],
          'testKey' => $test,
        ];
      };
    }
  }

  $variables['#attached']['drupalSettings']['playground']['pages_react']['filters'] = $filters;

  $sorts = [];

  if ($view->sort) {
    foreach ($view->sort as $sort) {
      if ($sort->isExposed()) {

        $sorts[] = [
          'id' => $sort->field,
          'label' => $sort->pluginTitle(),
          'direction' => $sort->options['order']
        ];
      }
    }
  }

  $variables['#attached']['drupalSettings']['playground']['pages_react']['sorts'] = $sorts;
}

function playground_form_system_theme_settings_alter(&$form, &$form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['alt_logo'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Alternate Logo Path'),
    '#default_value' => theme_get_setting('alt_logo'),
    '#description'   => t("Add a path to an alternate logo, for use in system branding block"),
  );
}

function playground_preprocess_block__system_branding_block(&$variables) {
  if (array_key_exists('#id', $variables['elements'])) {
    $block = Block::load($variables['elements']['#id']);

    if ($block) {
      $region = $block->getRegion();

      if ($region === 'header') {
        $variables['configuration']['mobile'] = true;
      }

      if ($region === 'footer' && $variables['site_logo']) {
        global $base_url;
        $theme = \Drupal::theme()->getActiveTheme();
        $variables['site_logo'] = $base_url . '/' . $theme->getPath() . '/' . theme_get_setting('alt_logo');
      }
    }
  }
}